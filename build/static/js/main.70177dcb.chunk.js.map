{"version":3,"sources":["util/Spotify.js","components/SearchBar/SearchBar.js","components/Track/Track.js","components/Tracklist/Tracklist.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","components/App/App.js","serviceWorker.js","index.js"],"names":["_accessToken","_scopes","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expireInMatch","expiresIn","Number","setTimeout","history","pushState","accessUri","encodeURIComponent","process","join","search","searchTerm","accessToken","fetch","headers","Authorization","then","response","json","responseJSON","tracks","items","map","track","id","name","artist","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","SearchBar","props","state","handleTermChange","bind","event","term","document","getElementById","value","this","setState","onSearch","className","placeholder","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","onRemove","album","renderAction","Tracklist","renderTrack","key","SearchResults","searchResults","Playlist","handleNameChange","onChangeName","target","playlistName","onChange","playlistTracks","App","_defaultPlaylistName","forEach","console","log","find","savedTrack","push","filter","currentTrack","updatePlaylistName","Boolean","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.70177dcb.chunk.js","sourcesContent":["const clientId = process.env.REACT_APP_CLIENT_ID;\r\nconst redirectUri = process.env.REACT_APP_REDIRECT_URI;\r\nconst _scopes = ['playlist-modify-public'];\r\nlet _accessToken;\r\nconst Spotify = {\r\n\tgetAccessToken: function () {\r\n\t\tif (_accessToken) {\r\n\t\t\treturn _accessToken;\r\n\t\t}\r\n\t\tconst accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n\t\tconst expireInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\t\tif (accessTokenMatch && expireInMatch) {\r\n\t\t\t_accessToken = accessTokenMatch[1];\r\n\t\t\tconst expiresIn = Number(expireInMatch[1]);\r\n\t\t\twindow.setTimeout(() => _accessToken = '', expiresIn * 1000);\r\n\t\t\twindow.history.pushState('Access Token', null, '/');\r\n\t\t\treturn _accessToken;\r\n\t\t} else {\r\n\t\t\tconst accessUri = ('https://accounts.spotify.com/authorize' \r\n\t\t\t\t+ '?response_type=token' \r\n\t\t\t\t+ '&client_id=' + encodeURIComponent(clientId)\r\n\t\t\t\t+ '&scope=' + encodeURIComponent(_scopes.join(' '))\r\n\t\t\t\t+ '&redirect_uri=' + encodeURIComponent(redirectUri));\r\n\t\t\twindow.location = accessUri;\r\n\t\t\treturn;\r\n\t\t}\r\n\t},\r\n\t\r\n\tsearch: function(searchTerm) {\r\n\t\tconst accessToken =  Spotify.getAccessToken();\r\n\t\treturn fetch(\"https://api.spotify.com/v1/search?type=track&q=\" + encodeURIComponent(searchTerm), {\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: `Bearer ${accessToken}`,\r\n\t\t\t}\r\n\t\t}).then(response => {\r\n\t\t\tif (response) {\r\n\t\t\t\treturn response.json();\r\n\t\t\t} \r\n\t\t\treturn [];\r\n\t\t}).then(responseJSON => {\r\n\t\t\tif (responseJSON && responseJSON.tracks) {\r\n\t\t\t\treturn responseJSON.tracks.items.map(track => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tid: track.id,\r\n\t\t\t\t\t\tname: track.name,\r\n\t\t\t\t\t\tartist: track.artists[0].name,\r\n\t\t\t\t\t\turi: track.uri,\r\n\t\t\t\t\t};\r\n\t\t\t\t});;\r\n\t\t\t}\r\n\t\t\t return [];\r\n\t\t});\r\n\t},\r\n\tsavePlaylist: function(name, trackUris) {\r\n\t\tif(!name && !trackUris.length) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst accessToken = Spotify.getAccessToken();\r\n\t\tconst headers = {'Authorization': 'Bearer ' + accessToken};\r\n\t\treturn fetch('https://api.spotify.com/v1/me', {headers: headers})\r\n\t\t\t\t.then(response => {\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t})\r\n\t\t\t\t.then(responseJSON => {\r\n\t\t\t\t\tconst userId = responseJSON.id;\r\n\t\t\t\t\tfetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n\t\t\t\t\t\theaders: headers,\r\n\t\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\t\tbody: JSON.stringify({name: name}),\r\n\t\t\t\t\t}).then(response => {\r\n\t\t\t\t\t\treturn response.json();\r\n\t\t\t\t\t}).then(responseJSON => {\r\n\t\t\t\t\t\tconst playlistId = responseJSON.id;\r\n\t\t\t\t\t\treturn fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n\t\t\t\t\t\t\theaders:headers,\r\n\t\t\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\t\t\tbody: JSON.stringify({uris: trackUris})\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}).then(response => {\r\n\t\t\t\t\t\treturn response.json();\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t}\r\n\t\r\n};\r\n\r\nexport default Spotify;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './searchbar.css';\r\n\r\n\r\nclass SearchBar extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tsearchTerm: ''\r\n\t\t}\r\n\t\t//this.search = this.search.bind(this);\r\n\t\tthis.handleTermChange = this.handleTermChange.bind(this);\r\n\t}\r\n\t\r\n\thandleTermChange(event) {\r\n\t\tconst term = document.getElementById('search').value;\r\n\t\tthis.setState({\r\n\t\t\tsearchTerm: term\r\n\t\t});\r\n\t\tthis.props.onSearch(term);\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"SearchBar\">\r\n\t\t\t\t<input placeholder=\"Enter A Song, Album, or Artist\" id=\"search\" />\r\n\t\t\t<button className=\"SearchButton\" onClick={this.handleTermChange}>SEARCH</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nSearchBar.propTypes = {\r\n\tonSearch: PropTypes.func.isRequired\r\n}\r\nexport default SearchBar;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './track.css';\r\n\r\nclass Track extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.addTrack = this.addTrack.bind(this);\r\n\t\tthis.removeTrack = this.removeTrack.bind(this);\r\n\t}\r\n\trenderAction() {\r\n\t\tif (this.props.isRemoval) {\r\n\t\t\treturn <button className=\"Track-Action\" onClick={this.removeTrack}>-</button>;\r\n\t\t} else {\r\n\t\t\treturn <button className=\"Track-Action\" onClick={this.addTrack}>+</button>;\r\n\t\t}\r\n\t}\r\n\taddTrack() {\r\n\t\tthis.props.onAdd(this.props.track);\r\n\t}\r\n\tremoveTrack() {\r\n\t\tthis.props.onRemove(this.props.track);\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"Track\">\r\n\t\t\t  <div className=\"Track-information\">\r\n\t\t\t\t<h3>{this.props.track.name}</h3>\r\n\t\t\t\t<p>{this.props.track.artist} | {this.props.track.album} </p>\r\n\t\t\t  </div>\r\n\t\t\t  {this.renderAction()}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nTrack.propTypes  = {\r\n\ttrack:  PropTypes.object.isRequired,\r\n\tonAdd:  PropTypes.func,\r\n\tonRemove:  PropTypes.func,\r\n\tisRemoval:  PropTypes.bool.isRequired\r\n\r\n}\r\nexport default Track;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Track from '../Track/Track';\r\nimport './tracklist.css';\r\n\r\nclass Tracklist extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.renderTrack = this.renderTrack.bind(this);\r\n\t}\r\n\trenderTrack(track) {\r\n\t\treturn <Track \r\n\t\t\t\tkey={track.id} \r\n\t\t\t\ttrack={track} \r\n\t\t\t\tonAdd={this.props.onAdd} \r\n\t\t\t\tonRemove={this.props.onRemove}\r\n\t\t\t\tisRemoval={this.props.isRemoval} />\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"TrackList\">\r\n\t\t\t{\r\n\t\t\t\tthis.props.tracks.map(this.renderTrack)\r\n\t\t\t}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nTracklist.propTypes = {\r\n\ttracks: PropTypes.array.isRequired,\r\n\tonAdd: PropTypes.func,\r\n\tonRemove: PropTypes.func,\r\n\tisRemoval: PropTypes.bool.isRequired\r\n}\r\nexport default Tracklist;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Tracklist from '../Tracklist/Tracklist';\r\nimport './searchresults.css';\r\n\r\nexport default class SearchResults extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"SearchResults\">\r\n\t\t\t\t<h2>Results</h2>\r\n\t\t\t\t<Tracklist \r\n\t\t\t\t\ttracks={this.props.searchResults} \r\n\t\t\t\t\tonAdd={this.props.onAdd}\r\n\t\t\t\t\tisRemoval={this.props.isRemoval} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nSearchResults.propTypes = {\r\n\tsearchResults: PropTypes.array.isRequired,\r\n\tonAdd: PropTypes.func.isRequired,\r\n\tisRemoval: PropTypes.bool.isRequired\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Tracklist from '../Tracklist/Tracklist';\r\nimport './playlist.css';\r\n\r\nclass Playlist extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.handleNameChange = this.handleNameChange.bind(this);\r\n\t}\r\n\thandleNameChange(event) {\r\n\t\tthis.props.onChangeName(event.target.value);\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"Playlist\">\r\n\t\t\t\t<input \r\n\t\t\t\t\tvalue={this.props.playlistName}\r\n\t\t\t\t\tonChange={this.handleNameChange} id=\"playlistName\" />\r\n\t\t\t\t <Tracklist \r\n\t\t\t\t\ttracks={this.props.playlistTracks} \r\n\t\t\t\t\tonRemove={this.props.onRemove} \r\n\t\t\t\t\tisRemoval={this.props.isRemoval} /> \r\n\t\t\t\t <button className=\"Playlist-save\" onClick={this.props.savePlaylist} >SAVE TO SPOTIFY</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nPlaylist.propTypes = {\r\n\tplaylistName: PropTypes.string.isRequired,\r\n\tplaylistTracks: PropTypes.array.isRequired,\r\n\tsavePlaylist: PropTypes.func.isRequired,\r\n\tonChangeName: PropTypes.func.isRequired,\r\n\tisRemoval: PropTypes.bool.isRequired,\r\n}\r\nexport default Playlist;","import React from 'react';\r\nimport './App.css';\r\nimport Spotify from '../../util/Spotify';\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport SearchResults from '../SearchResults/SearchResults';\r\nimport Playlist from '../Playlist/Playlist';\r\nexport default class App extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis._defaultPlaylistName = \"New Playlist\";\r\n\t\tthis.state = {\r\n\t\t\tsearchResults: [], //[{\"id\":1,\"name\":\"name0\",\"artist\":\"artist0\",\"album\":\"album0\",\"uri\":\"http://localhost:3000/\"},{\"id\":2,\"name\":\"name1\",\"artist\":\"artist1\",\"album\":\"album1\",\"uri\":\"http://localhost:3000/\"},{\"id\":3,\"name\":\"name2\",\"artist\":\"artist2\",\"album\":\"album2\",\"uri\":\"http://localhost:3000/\"},{\"id\":4,\"name\":\"name3\",\"artist\":\"artist3\",\"album\":\"album3\",\"uri\":\"http://localhost:3000/\"},{\"id\":5,\"name\":\"name4\",\"artist\":\"artist4\",\"album\":\"album4\",\"uri\":\"http://localhost:3000/\"},{\"id\":6,\"name\":\"name5\",\"artist\":\"artist5\",\"album\":\"album5\",\"uri\":\"http://localhost:3000/\"}],\r\n\t\t\tplaylistTracks: [], //[{\"id\":1,\"name\":\"name0\",\"artist\":\"artist0\",\"album\":\"album0\",\"uri\":\"http://localhost:3000/\"}],\r\n\t\t\tplaylistName: this._defaultPlaylistName,\r\n\t\t};\r\n\t\t['addTrack', 'removeTrack', 'updatePlaylistName', 'savePlaylist', 'search'].forEach(method => {\r\n\t\t\tthis[method] = this[method].bind(this);\r\n\t\t});\r\n\t}\r\n\tsavePlaylist() {\r\n\t\tconst trackUris = this.state.playlistTracks.map(track => track.uri);\r\n\t\tSpotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tplaylistName: this._defaultPlaylistName,\r\n\t\t\t\tplaylistTracks: [],\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\tupdatePlaylistName(name) {\r\n\t\tthis.setState({\r\n\t\t\tplaylistName: name\r\n\t\t});\r\n\t}\r\n\taddTrack(track) {\r\n\t\tconsole.log('add...');\r\n\t\tif(this.state.playlistTracks.find(savedTrack => savedTrack.id === track.id)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\tlet tracks = this.state.playlistTracks;\r\n\t\t\ttracks.push(track)\r\n\t\t\tthis.setState({\r\n\t\t\t\tplaylistTracks: tracks,\r\n\t\t\t});\r\n\t}\r\n\tremoveTrack(track) {\r\n\t\tconsole.log('remove...');\r\n\t\tlet tracks = this.state.playlistTracks;\r\n\t\ttracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\r\n\t\tthis.setState({\r\n\t\t\tplaylistTracks: tracks\r\n\t\t})\r\n\t}\r\n\tsearch(searchTerm) {\r\n\t\tSpotify.search(searchTerm).then(searchResults => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tsearchResults: searchResults\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\t\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t<div>\r\n\t\t\t\t<h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\r\n\t\t\t\t<div className=\"App\">\r\n\t\t\t\t\t<SearchBar onSearch={this.search} />\r\n\t\t\t\t\t<div className=\"App-playlist\">\r\n\t\t\t\t\t\t<SearchResults \r\n\t\t\t\t\t\t\tsearchResults={this.state.searchResults} \r\n\t\t\t\t\t\t\tonAdd={this.addTrack} \r\n\t\t\t\t\t\t\tisRemoval={false} />\r\n\t\t\t\t\t\t<Playlist \r\n\t\t\t\t\t\t\tplaylistName={this.state.playlistName} \r\n\t\t\t\t\t\t\tplaylistTracks={this.state.playlistTracks} \r\n\t\t\t\t\t\t\tonRemove={this.removeTrack} \r\n\t\t\t\t\t\t\tonChangeName={this.updatePlaylistName}\r\n\t\t\t\t\t\t\tsavePlaylist={this.savePlaylist}\r\n\t\t\t\t\t\t\tisRemoval={true} /> \r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}